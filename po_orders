from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class POOrdersController(http.Controller):

    @http.route('/api/po_orders', type='http', auth='none', methods=['GET'], csrf=False)
    def get_po_orders(self, **kwargs):
        try:
            # Authentication
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch purchase orders
            purchases = request.env['purchase.order'].sudo().search([("state", "in", ["purchase", "done"])])
            purchases_data = []
            for purchase in purchases:
                po_data = {
                    'PO No': purchase.name or '',
                    'Invoice No': ', '.join(purchase.invoice_ids.mapped('name')),
                    'Supplier Name': purchase.partner_id.name or '',
                    'Order Date': purchase.date_order,
                    'PO Cost': purchase.amount_total,
                    'Items': [],
                    'Reference Numbers': []
                }
                
                has_products = False
                for line in purchase.order_line:
                    # Get product code with fallback to internal reference or empty string
                    product_code = line.product_id.default_code
                    if not product_code:
                        product_code = line.product_id.name or ''
                        
                    item_data = {
                        'Item Code': product_code,
                        'Item Description': line.name or '',
                        'Item Cost': line.price_unit,
                        'Ordered Qty': line.product_qty,
                        'Has Products': line.product_id.type != 'service'
                    }
                    po_data['Items'].append(item_data)
                    
                    if line.product_id.type != 'service':
                        has_products = True

                # Fetch reference numbers from stock.move.line only if there are products
                if has_products:
                    stock_moves = request.env['stock.move.line'].sudo().search([('picking_id.purchase_id', '=', purchase.id)])
                    reference_numbers = set(stock_moves.mapped('picking_id.name'))
                    po_data['Reference Numbers'] = list(reference_numbers)

                purchases_data.append(po_data)

            return cors_response(Response(json.dumps(purchases_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching PO orders: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
        

    @http.route('/api/material_allocation', type='http', auth='none', methods=['GET'], csrf=False)
    def get_material_allocation(self, **kwargs):
        try:
            # Authentication
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch manufacturing orders
            manufacturing_orders = request.env['mrp.production'].sudo().search([])
            allocation_data = []
            
            for mo in manufacturing_orders:
                # Get related stock moves
                stock_moves = request.env['stock.move'].sudo().search([('production_id', '=', mo.id)])
                
                for move in stock_moves:
                    product = move.product_id
                    # Get product code with fallback to product name
                    product_code = product.default_code
                    if not product_code:
                        product_code = product.name or ''
                        
                    allocation_data.append({
                        'Reference No': mo.name or '',
                        'Product Name': product.name or '',
                        'Sales Reference No': mo.origin or '',
                        'Manufactured Qty': mo.product_qty,
                        'Product Code': product_code,
                        'Item Qty': move.product_uom_qty,
                        'Description': product.name or '',
                        'Unit Price': product.standard_price,
                        'Available Stock': product.qty_available,
                        'Lead Time': product.sale_delay if hasattr(product, 'sale_delay') else 0
                    })

            return cors_response(Response(json.dumps(allocation_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching material allocation: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
