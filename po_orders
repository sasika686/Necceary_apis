from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response  # Import the authentication functions

_logger = logging.getLogger(__name__)  # Set up Odoo's built-in logger

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()  # Serialize date and datetime to ISO format
    raise TypeError("Type not serializable")  # Raise error for non-serializable types

class POOrdersController(http.Controller):

    @http.route('/api/po_orders', type='http', auth='none', methods=['GET'], csrf=False)
    def get_po_orders(self, **kwargs):
        try:
            # Authenticate user
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

              # Your main logic to fetch purchase orders
            purchases = request.env['purchase.order'].sudo().search([("state", "=", "purchase")])
            purchases_data = []
            for purchase in purchases:
                # Get the related invoice(s)
                invoices = purchase.invoice_ids

                # Get products and descriptions
                products = []
                for line in purchase.order_line:
                    products.append({
                        'Product': line.product_id.name,
                        'Description': line.name,
                        'Quantity': line.product_qty,
                        'Unit Price': line.price_unit,
                        'Subtotal': line.price_subtotal
                    })

                purchases_data.append({
                    'PO': purchase.name,
                    'Order Date': purchase.date_approve,
                    'Supplier Name': purchase.partner_id.name,
                    'PO Cost': purchase.amount_total,
                    'Invoice Number': ', '.join(invoices.mapped('name')) if invoices else '',
                    'Products': products
                })
            return cors_response(Response(json.dumps(purchases_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching finished goods inventory: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
