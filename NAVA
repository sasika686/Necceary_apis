from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class InventoryPurchasingController(http.Controller):

    @http.route('/api/nava_inventary_purchasing', type='http', auth='none', methods=['GET'], csrf=False)
    def get_inventory_purchasing(self, **kwargs):
        try:
            # Authentication
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch inventory items
            stock_quants = request.env['stock.quant'].sudo().search([])
            inventory_data = []

            for quant in stock_quants:
                product = quant.product_id
                
                # Get supplier info for MOQ and Lead Time
                supplier_info = request.env['product.supplierinfo'].sudo().search([
                    ('product_tmpl_id', '=', product.product_tmpl_id.id)
                ], limit=1)

                # Get the last purchasing date
                last_purchase = request.env['stock.move.line'].sudo().search([
                    ('product_id', '=', product.id),
                    ('picking_id.picking_type_id.code', '=', 'incoming')
                ], order='date desc', limit=1)

                item_data = {
                    'Item Code': product.default_code,
                    'Description': product.name,
                    'Unit of Measure': quant.product_uom_id.name if quant.product_uom_id else '',
                    'Category': quant.product_id.categ_id.name if quant.product_id.categ_id else '',
                    'MOQ': supplier_info.min_qty if supplier_info else 0,
                    'Lead Time': supplier_info.delay if supplier_info else 0,
                    'QTY': quant.inventory_quantity_auto_apply if quant.inventory_quantity_auto_apply else 0,
                    'Value': quant.value if hasattr(quant, 'value') else 0,
                    'Last Purchasing Date': last_purchase.date if last_purchase else None
                }
                inventory_data.append(item_data)

            return cors_response(Response(json.dumps(inventory_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching inventory purchasing data: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
    
        
        
    @http.route('/api/nava_finishing_goods', type='http', auth='none', methods=['GET'], csrf=False)
    def get_finishing_goods(self, **kwargs):
        try:
            # Authentication
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Get stock location
            stock_location = request.env.ref('stock.stock_location_stock').id

            # Fetch all products with the correct context
            products = request.env['product.product'].sudo().with_context(
                location=stock_location,
                compute_child=True
            ).search([])
            
            finishing_goods_data = []

            for product in products:
                # Get product with proper context for stock calculations
                product_with_context = product.with_context(
                    location=stock_location,
                    compute_child=True
                )

                # Get the latest production order for this product
                production_order = request.env['mrp.production'].sudo().search([
                    ('product_id', '=', product.id)
                ], order='create_date desc', limit=1)

                item_data = {
                    'Item Code': product.default_code or '',
                    'Description': product.name or '',
                    'Order No': production_order.origin if production_order else '',
                    'Units': product.uom_id.name if product.uom_id else '',
                    'Category': product.categ_id.name if product.categ_id else '',
                    'Ordered Qty': production_order.product_qty if production_order else 0.0,
                    'On hand Qty': float(product_with_context.qty_available),
                    'Shipped Qty': float(product_with_context.outgoing_qty or 0.0)
                }
                finishing_goods_data.append(item_data)

            return cors_response(Response(json.dumps(finishing_goods_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching finishing goods data: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
