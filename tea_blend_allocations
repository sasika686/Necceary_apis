from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class TeaBlendAllocation(http.Controller):
    @http.route('/api/tea_blend_allocations', type='http', auth='none', methods=['GET'], csrf=False)
    def get_tea_blend_allocations(self, **kwargs):
        try:
            # Authenticate user
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch all tea blend allocation records
            allocations = request.env['tea.blend.manufacturing.allocation'].sudo().search([])
            
            allocation_data = []
            for allocation in allocations:
                allocation_data.append({
                    'id': allocation.id,
                    'blend': {
                        'id': allocation.blend_id.id,
                        'name': allocation.blend_id.name,
                    },
                    'lot': {
                        'id': allocation.lot_id.id,
                        'name': allocation.lot_id.name,
                    },
                    'quantity_kgs': allocation.quantity_kgs,
                    'quantity_packages': allocation.quantity_packages,
                })
            
            return cors_response(Response(json.dumps(allocation_data, default=date_handler), content_type='application/json'))
            
        except Exception as e:
            _logger.error(f"Error fetching tea blend allocation data: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
