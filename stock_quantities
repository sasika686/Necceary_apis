from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class StockQuantities(http.Controller):
    @http.route('/api/stock_quantities', type='http', auth='none', methods=['GET'], csrf=False)
    def get_stock_quantities(self, **kwargs):
        try:
            # Authenticate user
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch all stock.quant records
            stock_quants = request.env['stock.quant'].sudo().search([])
            
            stock_data = []
            for quant in stock_quants:
                # Fetch related records
                product = quant.product_id
                location = quant.location_id
                category = quant.product_categ_id
                lot = quant.lot_id
                company = quant.company_id
                
                stock_data.append({
                    'Product Name': product.name,
                    'Product Code': product.default_code,
                    'Location': location.name,
                    'Location Complete Name': location.complete_name,
                    'Category': category.name,
                    'Category Complete Name': category.complete_name,
                    'Lot Number': lot.name if lot else None,
                    'On Hand QTY': quant.inventory_quantity_auto_apply,
                    'Reserved QTY': quant.reserved_quantity,
                    'Available QTY': quant.inventory_quantity_auto_apply - quant.reserved_quantity,
                    'Value': quant.value,
                    'Company Name': company.name,
                    'Last Updated Date': quant.write_date.strftime('%Y-%m-%d'),
                    'Last Updated Time': quant.write_date.strftime('%H:%M:%S')
                })

            return cors_response(Response(json.dumps(stock_data, default=date_handler), content_type='application/json'))
            
        except Exception as e:
            _logger.error(f"Error fetching stock quantities data: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
