from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class FinishedGoodsItemsController(http.Controller):

    @http.route('/api/finished_goods_inventory', type='http', auth='none', methods=['GET'], csrf=False)
    def get_finished_goods_inventory(self, **kwargs):
        try:
            # Authenticate user
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Get the stock.lot model to access created_date
            StockLot = request.env['stock.lot'].sudo()
            
            # Your main logic to fetch finished goods inventory
            items = request.env['stock.quant'].sudo().search([("location_id.usage", "=", "internal")])
            items_data = []
            
            for line in items:
                product = line.product_id
                company = line.company_id
                lot = line.lot_id
                expiration_date = None

                # Fetch the correct cost considering the company context
                product_tmpl = product.product_tmpl_id.with_company(company)
                cost = product_tmpl.standard_price

                # Get lot information including creation date
                lot_created_date = None
                if lot:
                    if hasattr(lot, 'expiration_date'):
                        expiration_date = lot.expiration_date.strftime('%Y-%m-%d') if lot.expiration_date else None
                    
                    # Get lot record and its created_date
                    lot_record = StockLot.browse(lot.id)
                    lot_created_date = lot_record.create_date.strftime('%Y-%m-%d %H:%M:%S') if lot_record.created_date else None

                # Get location and parent location
                location = line.location_id
                parent_location = location.location_id if location else None

                items_data.append({
                    'Product Name': product.name,
                    'Company Name': company.name,
                    'Product Category': product.categ_id.name,
                    'Lot No': lot.name if lot else None,
                    'Lot Created Date': lot_created_date,
                    'Expiration Date': expiration_date,
                    'On_Hand_QTY': line.inventory_quantity_auto_apply,
                    'Reserved QTY': line.reserved_quantity,
                    'Value': float(line.value) if line.value else 0.0,
                    'Location Name': location.name if location else None,
                    'Parent Location': parent_location.name if parent_location else None,
                    'Cost': float(cost) if cost else 0.0,
                })

            return cors_response(Response(json.dumps(items_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching finished goods inventory: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
