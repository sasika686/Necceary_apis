from odoo import http
from odoo.http import request, Response
import json
from datetime import date, datetime
import logging
from .authentication import authenticate_user, cors_response

_logger = logging.getLogger(__name__)

def date_handler(obj):
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    raise TypeError("Type not serializable")

class InvoiceLineSales(http.Controller):
    @http.route('/api/invoice_line_sales', type='http', auth='none', methods=['GET'], csrf=False)
    def get_invoice_line_sales(self, **kwargs):
        try:
            # Authenticate user
            auth_header = request.httprequest.headers.get('Authorization')
            if not auth_header:
                return cors_response(Response(json.dumps({'error': 'Missing Authorization header'}), content_type='application/json', status=401))
            try:
                user = authenticate_user(auth_header)
            except Exception as e:
                return cors_response(Response(json.dumps({'error': 'Authentication failed', 'details': str(e)}), content_type='application/json', status=401))

            # Fetch all pos.order records where the order is not cancelled
            orders = request.env['pos.order'].sudo().search([
                ('state', '!=', 'cancelled')
            ])

            invoice_line_data = []
            for order in orders:
                for line in order.lines:
                    # Fetch product data through the product_id relationship
                    product = line.product_id
                    company = order.company_id

                    # Handle multiple payment methods
                    payments = request.env['pos.payment'].sudo().search([
                        ('pos_order_id', '=', order.id)
                    ])

                    # Calculate total order amount for proportional distribution
                    order_total = order.amount_total
                    line_proportion = line.price_subtotal_incl / order_total if order_total else 0

                    payment_methods = []
                    for payment in payments:
                        if payment.payment_method_id:
                            # Calculate proportional amount for this line item
                            proportional_amount = payment.amount * line_proportion
                            payment_info = {
                                'method': payment.payment_method_id.name,
                                'amount': round(proportional_amount, 2)
                            }
                            payment_methods.append(payment_info)

                    invoice_line_data.append({
                        'Item Description': product.name,
                        'QTY': line.qty,
                        'Company Name': company.name,
                        'Point of Sale': order.config_id.name,
                        'Total Selling Price': line.price_subtotal_incl,
                        'Invoice Month': line.create_date.strftime('%B'),
                        'Invoice Number': order.name,
                        'Hours': line.create_date.strftime('%H'),
                        'Weekdays': line.create_date.strftime('%A'),
                        'Category': product.categ_id.name,
                        'Order Date': order.date_order.strftime('%Y-%m-%d'),
                        'Order Time': order.date_order.strftime('%H:%M:%S'),
                        'Customer Name': order.partner_id.name if order.partner_id else 'Unknown',
                        'Payment Methods': payment_methods,
                        'Employ': order.employee_id.name if order.employee_id else 'Unknown',
                        'Order Reference': order.pos_reference
                    })
            return cors_response(Response(json.dumps(invoice_line_data, default=date_handler), content_type='application/json'))
        except Exception as e:
            _logger.error(f"Error fetching invoice line sales data: {str(e)}")
            return cors_response(Response(json.dumps({'error': str(e)}), content_type='application/json', status=500))
